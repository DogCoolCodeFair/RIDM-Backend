from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
import base64


base64_sig = "iVBORw0KGgoAAAANSUhEUgAAAqIAAADwCAYAAADb2AYmAAAAAXNSR0IArs4c6QAAIABJREFUeF7tnQ3QdltZ1y8dPxrKCIUEpU5HrEkhTwimkDOkSeAHEhMwCiadaDhWKh4CoYI5Mk7OiB8IKHmYwk6ANdiEICE5OUSOEIRzZAIhoshhhAmcQwg19DU0P951ddbZ576f 2t/rLX3b8/c8zzv  y9Pn7Xuvf 72td61qfFR4SkIAEJCABCUhAAhJYgMBnLVCnVUpAAhKQgAQkIAEJSCAUog4CCUhAAhKQgAQkIIFFCChEF8FupRKQgAQkIAEJSEACClHHgAQkIAEJSEACEpDAIgQUootgt1IJSEACEpCABCQgAYWoY0ACEpCABCQgAQlIYBECCtFFsFupBCQgAQlIQAISkIBC1DEgAQlIQAISkIAEJLAIAYXoItitVAISkIAEJCABCUhAIeoYkIAEJCABCUhAAhJYhIBCdBHsVioBCUhAAhKQgAQkoBB1DEhAAhKQgAQkIAEJLEJAIboIdiuVgAQkIAEJSEACElCIOgYkIAEJSEACEpCABBYhoBBdBLuVSkACEpCABCQgAQkoRB0DEpCABCQgAQlIQAKLEFCILoLdSiUgAQlIQAISkIAEFKKOAQlIQAISkIAEJCCBRQgoRBfBbqUSkIAEJCABCUhAAgpRx4AEJCABCUhAAhKQwCIEFKKLYLdSCUhAAhKQgAQkIAGFqGNAAhKQgAQkIAEJSGARAgrRRbBbqQQkIAEJSEACEpCAQtQxIAEJSEACEpCABCSwCAGF6CLYrVQCEpCABCQgAQlIQCHqGJCABCQgAQlIQAISWISAQnQR7FYqAQlIQAISkIAEJKAQdQxIQAISkIAEJCABCSxCQCG6CHYrlYAEJCABCUhAAhJQiDoGJCABCUhAAhKQgAQWIaAQXQS7lUpAAhKQgAQkIAEJKEQdAxKQgAQkIAEJSEACixBQiC6C3UolIAEJSEACEpCABBSijgEJSEACEpCABCQggUUIKEQXwW6lEpCABCQggU0T NMRcc I EPl88cGNP5b Tc/OSeP/1J uT4iPi8i7hURD4iI 0TEnyt/y3N JyL XUS8NiL 9aZpN9x5hWjDxrFpEpCABCQggY4JICARnDeUn4hN/l0Lyzm795KIeHFEvH/OSq3ragIK0elHyA9FBB8PCUhAAhKQwJoJ1KIT7yT/bvH4xYi4OSLSc9piGzfTJoXotKZ V0Q8MCLeHREPmrYqS5eABCQgAQnMRgChiacTLyefv3ig5ndGBNPsiL9aAObv RNv6XA6vvag5pR9/t8XRcTXlqn5bML7IuIh5bOvWe NiK YjZYV7SWgEJ12cChEp Vr6RLonUDGx9GPfPjyUP9gmb78UxFxj4j4w Xh/dkR8fKIuHdE/G7vnbf9XRBgjCI408OJl3MYz5kdeXtEvKcSm4jLJWMzaSdxpLcWUfoFA J/OSJe2YUVVtxIhei0xv1IeUv7aHmQTFubpUtAAi0R4CF4XXmAp9eI9uWCijHa tLyIH3rGIVZxuYJDEUnY3VXPOfHI I3i8jkJ4KTn60frxl4bhHJ39B6o9fePoXotBb dFW8rKdlbekSaIEA05OPKA 7fV6jKdqJCLgtIn5qisItc7UEGKOMV7yc 2I6h6IzhWevUN5UvQwqRBuwouJoWiMoRKfla kSWJoA3qLHFuG5L0aOBzkeI6bec5qS3 tP9iOn55ma/72I P3V1Hzd16dExF/Z0XnqQZC6QHLpkdFm/YzXfFFCeO56WXpz5ensXXTusoJCtLGxqRCdziDkNGNqnuM3IuKh01VlyRKQwMwEEIEpQIdV1w9yhGcurpiiiSzIeHJEPLws2Mg6uPc8OyL 0RSVWmZXBNLryYvS8GXptyvRyVjtYXr9UvgfqAT4TRHxsksL9PrLCChEL N31dU8IN6hEJ0OsCVLYEYCPMxzlfAPDOplNTAPcT6khVnq ImI OpBDCqxoz8cEb 8VKOsdxECjFdelHhhqlMo4Z3PccrPraUvul9EfKiyCPGhSy6mWmRwtFapQnQ6izA1dosDfjrAliyBiQkwjckUOF6k4QKj10fErxbh2drD/GfLDAwvwxx3lH7QZo/1EtgXJoLXkxckPlsXXY OiH8REWSf ETZkYnFxB4LElCITgd/KESfb9zWdLAtWQIjEciHOV7PoScpH Q9THcjnB8WEc MiC8sbLgncR/yWBcBbP308rKUK9zx0jNOtzLdfqxFXxURTyons/Xnnzn2Qs bjoBCdDq2eEu sSr FRHx3dNVZ8kSkMAFBPB6pvezLoY9qvOBPmWs5wVNv/LSb46I5xVRyolORU5Fet5ymXpHfDJuc8ERscnp WzNSz8vnd21PSEiXl396VsMWWnBLBEK0enscPvAo0KsFgsKPCQggTYI4D3iYU4cXb16GPGZD/QexeeQLh4zXoTvHxH/KiIe2QZ W3EigUyxxAtTeusRn/mipPjcD3QoQsm/ 7dLZooTzeDpYxNQiI5N9M7y6hQR/K/biU3H2pIlcAqBFKBMv dUJnF05OBEgK7xgY4Y5Z7E8b0R8TOnAPPcxQjwgoTo5IXpi0sqL1a2r lFaWq4vIDhCOInxy8Unh eumLLP46AQvQ4TuecNRSilCHvc0h6jQTGIZACtM6xmR6lHuI L6VAFg8WMP37iPiqSwvz kkJkOsz45R5bvBy9IKI K2VvihNCfN1EfGYUsH7I KPT1mZZZ9OQGF0OrNjr/i5QcJpt/k8lpznSWB8AohPvErpAWX6HQ/ollYRP754g6BLmJDbgo4/zi4pEa91xikzTjNEZItpli7hWF87nJK/2d3HxkI7XjkK0fFYDksaClHeaK frjpLlkAXBHjYsv967r3OA7feyzqFIdOPubXgJXGaLOZ44WBBB6J0SwK0HhjpFSXF01/vYsSsu5FMu cuWXwPcrX7WkNE5rZmnbz idWL2NztsL4rCChEpxseCtHp2Fpy2wQyru2eRQDmHta14DylB7zE8SER9U WncoOXc8Dnu9gvahjywI0eZH0/hll1zdiDj3mJ5DJ5pl65/fM80l4yBZ2NpqLeL3FtnvKz0X9jHoUomdAO/KSYR5RLpP3kfA8rQkCCEcelCkoc2V5ejHrf9e/T914Vn5/LCJeFBG/PqgsF3bkPuw85HngL7nj0dQ8Tin/6yPi18oFbDvM9sMe0xPI/LS50xH/vq1adDR9C7ZVQ71Gg8VJeEM9GiWgMJrOMNxw8MjUh7yn423J5xNAvN1QvIf8zkOyTuZ fsl3Xsk0O17NnGbnJx/ L4VtLXCZvj/mIPaaVCy8 OFRYltDyqE BOgWFiEdw6k 5z9FxJcVzyhhCx7TEWA8MiOQ28Iy9Z6xyWvMzjAdyeNLrqfjEaGMceOhj c3 5kKo mQPy0ibh0UrwdiOt6WfBwBPJesyM3p8mMFJ8IuxWMtInf9Xp93XKt2n5VT/LTxL0XEfSOC6bb77Dj9f0fE55YYOx70CtD95EnqzSIOHtBM03uMSyC3hs2pd747mRrMqfdxWQ9Le1dEPLD857sj4kHTVmfpYxBQiI5BcXcZ315WPdZ/dVeT6Xhb8m4CtbcTL/2 OE3SGCEgeVBmTCYl1r 3wPheJQURu6I8bpCInhhSHkKXLG5qoY9TtyHDhhDrN05d2YbKz1XvGRaSq959KZp EMD R6odxFwcPD3z0WpQiI6G8m4F1Qmk848K0el4W/I1Ang7EZ 5C0u9YxB/J2aSm3TuQc3P3oQbD3q8eTkFjyf0HmUAuIPZ4W9C3pteFhE3HT7dMw4QyFXvcMX7ifDEA rU zxDB 8 ixgzYf3zI LFEXHHPNVby6UEFKKXErz6er4IeHDSs2T6pml5b610hBgPP8QngpNURXnkVHoKTjydvacsoq8I0AwnYLESD3z6nrsG0f/vj4iXbG0wnNDfjF93av4EaINTh7tz5cYILIrr7cXufArLXonw/OEqXzfC/wdN0bSsUc6pXSF6DrXjr8lYLIXo8cw882oCiE4EZ8Z41mezEKL2dK7FI4PwvKUS2jz0ib r4 3qxYHsPpNxYo6nuxP4WxHx4xGB56jeZUpWhwkgQBmLufhoixsjHKY0/Rl4QUlO/7BSFdkzyAjh0SEBhei0RuNmlatS3VlpWtZrLT3TviA a48n/WWaHeGZn7UIz7TlcEtO ovg3OfZzRmI/1MWLq11TFzar3xBJsbWtFbH0cTrzs5c3NOZbYAbIn5t37njaCx31v2KF/SppQmkckOE kK1nE0urlkhejHCKwsYxonKe1reayk9V91mzsHsVz4A1yo8a/vx3SH9GQKAfmd6pn3Tnn7Xjh/9mWMRrzHeY4/9BBhXCFBeAnkRIv5T0bPMiMEWP13NdhDf/PMR8cllmmOtYxFQGI1Fcn85n4qIz4 I3yuJwaev0Rp6JUDOQcRn7fnc4q4r9WYQTH3ihbrK88Q03c9UaZ2ccr76G5A7znj/38 JcBBmsxA/hLwwJvUeL3dnrXcq/GARoM9ZrjnWPCYBb0Rj0txdFg/QTM4t7 l591ZDxpwhPnOF xbFJ3aj/zxwcvUxD38WI 07EKDfWdI4cQ67Lf2TiPibvQ2CGdubnmO3PNwNne8hMaAIUWKRM//njCayqooA45V45oeU/3OXpBUOD4XR9EZlQQW71nCwgt4VldMz76EGvJ94 rjRcuS0O1N/va9uP4d/PRWPAMAzvM8LSkL7J1fx19THVpXP3Ci7U3gj3okRNbPAXakx3piCJ7MJnk8EqMnnTxlZ45 bY5WSSU7PTMcbI IT41dliUsSUIhOTx9RwUpnjgd7c5seeMM17Ir9zGm/HvN5joW6noonJVOuSN5VPiL0lRHxF8ofeUD9M P2jjbFsyLiBWXvbbxLWz9yARLPwhSgLkBadlQgQPNDS8x3u6w9Jq9dITo54s/c3PB KUSnZ91qDXj70gNKGzPpNQJs6x7y/H4cWhEPt2 LiO8uDyn jZD6HhNXnzTsk/eWN9fITBR4PRl3Of2 9e/iSQNpgpO/JiL WkSwPTaHsxwTQG6xSIXo9FapheiWb/7Tk26rhtzTnSm/jHnE68nUu4se7kxCD6dDU/FYdugl dHi2XP3lNPGfcasb/Hen7uN5RaceN63GAZz2oiZ5 xbKwHqLMc8zJupZYs3o7nh87bN9A HQnRu vPXl le InnBZH19yPibeYc/P/GyITq/MehqXjOYfHIY8qCBbyg Znfuv3XiNePz3Dr1/57dnUPGEPcfxHivAj6Mri8xRmD3xsR3A84EKBvKLsjLd86WzAbAYXo9KhrIWoC6el5L1HDcOU7U /YPfN9LtGmFuskGfU3RcQ/Lo0jDyDxX1cd7CHNDioc5Az8PqfizzYt45TMArwc5SK5swvr4MLcBALBw3fR/J9tGC3vl3im Z2DhYZ8vz/cRhNtxZwEFKLT064XYtxYpmanr9Ua5iDAwxxPSz7UWXjE1Dsf483uagEY/Y0yxU7s10MPGIi8oCzyI k6HlBWy758DqOuuI5M3XSMF7pnDMRjc9/NncfwfroAaXmL5k5phETwe2YKyVCJ5VtoCxYhoBCdHnstRPHsXJUXcfrWWMOlBHKhA3bN6c3bnO67EisC6EfKvtAkCX/GnrNhyzTdc8vfEaDs/EP8mJ6SS0futZRY5Gld6wvxU0raL9Lk8f3cciaKy0fLeCUMPaApQE2RNR7jrktSiE5vvlqIuuPL9LynqmHX2zw3Uryfelv2U693PYIVon24QAS2mccxxT1TdUzhf3Qqg26wXPgj1tYWq86sBF62OhXaBs3bXJf5LmOb2uPJ918B2pyplm2QQnR6/vUe2ArR6XmPXcNQgDLdl9v9Of1 Ne1DL2G72PKQctZg7FF8rbzMabyG z4ih0WgiJz6OzkNOUs9hQCxudhmuFkH9wNf2k8huZFz13BDat1UpAy5vTRyK4sEWrfJse3jxskNFcGUDzu8Sh6HCVz1ApaeEh5YyRaPliuZD3O95Az2mMdryD2p14O249VlvLy2WhTYa3/W0m6 05krud6qOGPmFaBrsfQE/VCITgB1R5E8ADjYMo7dlTzaJoBAIpaRG2omvNZLd7zNmI5n9x74vbTa x3vFQ8r HIgJMyrejzXS87MFwOmRntcHFJP8/JCjxB1C85LRsQ41zKWeDGoszDwveal0pf2cRivvhSF6Dwmrvebl/k8zM pBW8Lizn4SUA9HlFXwJ9O8i1lYRJJ53 28mDlSlmYIuz1kpzO9twrEG68XPWWQo7vIrMSvLwYA3qu9ce9DtH5qIj4jmrBZr1Dld/rcXmvvjRF0TwmNqn9PJzPraX2trj95rkUr133upJ8/r0R8alqGtjMApdxvfTqfBlmRXkPsc28tCCcEaC5/ase0EtHwfnX54JCvJ8Z2oFdeKk0X/L5XL0yIhSi8wwDbqavKVW5YGke5sfWgteTmysPaKaTDKg/ltzdz0ux8z8j4vPL1Htua9qD Dm/521fyYvWB4o9Miyi1RYjePg Zh5Qt Fc1lLDcBpe1PlOO/W rF1WVbtCdB5zcnP9SER8bpmOvH6eaq3lCgL1yk5izjLvoNBOI8DYflBEvKKapmObvr9rDN9pICc8u5f8oSlAeS5lWMyEWCx6DwHujRnLnTsfERaRu8U59e7QGZWAQnRUnFcW9q6ySwwn9TI9Nh d WoaCtDnRcSvzVf9amrKqToeWLxYXVd69uyyUGk1HV1BRzJtU6v3HWIOmYZnHCF23Ipz3kGXm3Rwb8QWtfjMxYSKz3ltsqnaFKLzmTsXC1Djt0YEXiOP QgwPclCJG60uRe8D7zT cMv07TgJWGK7rsi4gGDFfKnl wVUxDI/eVZydzatDyxhghQMom4gG0K6 8vE/bp9azTeeU2xW6LOq89Nl2bQnQ 8z8yIn6lVIeHgt1NPKYnUG8vx3g3DvR05jBk33eEOw8tQhkQDr8bEX nrJA/Zv/402v2iksJ5LR8S6vlMw4U76c77Vxq4eOu50Wc7y7fY15IMtdnbreZcZ/Gch/H07NGJKAQHRHmEUVlPtEPRcSXHnG p1xGAC80W8zx4ONN34UPp/GsF47w zCBOB5mhA7TdsY9n8Z2rrNZQIbtUnjMVe  ejJHL88eNzGY1hrMXnx5RDy5iNBMn8aY4IUc8WkmgmltYOlHEFCIHgFpxFMQRTkdvLb9nkfEdHFRdT5QE9KfjnO489GLduT95OH2ylK0mSBOZzzHFQgRsnVgn6U3ZMjYbOJUcxp DgZbqqP2eGaC fdFxIerle68NOr13NKo6KCvCtF5jUQS4DeWKt9dVhvP24L111bvb44HD6 LgfbH2Z2HVyYPP5TQ/00l3vatEfHw44r3rJkJPLckHSeGdynPV YD/fMR8c/dyGDUEYDwvKF8D/nu1ltr4vHMOE/vf6Nit7CxCShExyZ6uLx69bxe0cO8jj2jXoyUCbCZevI4TCD37ubBBrtDU6b1PvKO4cN8lzojxecSe8vzfeSlhtCNfCHUE3fZSOB7R4wn9qxXt2duz0wsv9RLx2W98 rNElCIzm/6 iFO7drgchvkFCTeFxY/IKR86F3NFaGQq9/5/ZSdj9Ib i8j4tGXm88SJiCQ95kbF9jzG/FJGFJ61fHMeZxGgHtZCk9 1i8TvCxmfKdxnqdx9ewGCSiCljHKqyPiCaXql0bEcyLiE8s0pftac0FSJsFeOhaudaCZsgWxwAMNkXDKvu9fVRZ 0U/CIIg/9GiPAHbF1nPmDkUwIUBJx8SY4uML4XFjY980O1ez0LL2djrVfhxTz qEgEJ0GUOxkpEHxQNL9U MiF9Ypind1pqxZwgqPC8shnAqfrc5cxEDwjEzCPD7OZ6q90TEn4yI/x4RfzQi7uh2BK234dg4t/Tk zHHwQIkQjxMx3SYdiaM50UB /D9zP rvZ1MsXtPO8zTMzonoBBd1oCZzgmvAZ4Lj MI1PGg5LTMFELHXb2ds4jRw0vFJx9wCNBzvVS5ZzkEXWzX7jjipYzV8nNMyzO2SOPF/Yux5YzE/pdBXuBuKouKcmER968UnIjOc7 b7Y5GWyaBAwQUossOkadFxK2lCT7Yj7MF3gMeshnXaDzondwyX2QuPsopPbxVYyxgqDMS/NmIeMtxJvOsmQkgaPh TJk7lLHGiw5jwpfBuxoYNjkLkS CnPG2iPhUidnl zjGd3LmoWV1EhifgEJ0fKanlvgfIuJPlItIs/KqUwvY0Pnp6aHL5LZEhG794KHHFPnNJTYPHjzgEJ9jTuvdLyLISfgHSrnuDNbmyEuvNVPkU03L1zMSfA8v8bK3SfG0VuXOYyk6c2ERIUOZPJ7vo97O07h69kYIKETbMPTvRMSXlKbwkwTEHnclwJQfHhiOlrYrXMpOpHFBaLAw5JMR8f5q0dEUD7wXRMSzSmddpLSU1Q/Xm98TxsUUHjfGHPvD8 zg93PijA/3ou0zEJ7Ed2YapVp41jsWTcG/bTK2TgJnEFCIngFtgku LSJ qSpXu9wJg5s U/EZ54hXdIs3 DqdCwKAf ONwtMyx24pb4 Ir4kI9pR/jC9LE9wFxikyx8LYuUMZb4w1BBhT8XwPp3jhGYfCuKWkx5M w7UWnrmaPZPHj1uzpUlgAwQUPO0YmXROpHXicMvEaxyYAiRnJT 3GIfGA5CHH95PhDgLQvLBN eikIdExDvK2CS7A1kePNojwAsKC4fGXqSUXlDGY24XumYRyv0mv3O7hGe9uKi9UWCLJNAZAYVoWwbLROGK0WsCDE8ox5Y8MLX3JbftY2eanPJbIofgX42If1hsgUfsdW19bWxNIcBLCsIJITWWUMy0TCx8IyZ7zLjjVgxXC8/hVpkpOk2l1Iq1bMfqCChE2zLp10bE6yPi3qVZW80vurVFSRlzRr/5pPiu94tecqSmp402PDUiXr5kY6x7J4HcSWmsRXyMw5dExP1LCMgpmx60bqL6 5bCnTZnirOcdVjipa91drZPAqMTUIiOjvTiAtmZhMUgeWxNjOJ1YTEEByvB55yCvth4JxSwS3zidcID1Vq8WT01P/a07wnIPPUKAmN5Q sV8WvZKAKxeSiHJx5PhadfMQksQEAhugD0I6qs8zVy stKIuQjLu36lPTqrFWEMq1NH/E21QmtW/F8XjV4cvOFD5Z0UV0PtJU1Pr83l8SWZ15QvN895 jN/KkZ4wkbDnN4rmzQ2531EFCItmvLevESrWSRCPvSrzFGi/7xALm9rAa/5IHaikX35RbM6b8Un62091A76vhltqb9rUMX PfZCODN4/uT20SeWnHujkQZeEF7Ssu0K76TPuDd5JPfs7FiZk9l6/kSkMABAgrRtofIV5atFOtW/oOI Hsrm0biAYrQYQqNhTkZJ9m2de7aOtp XbWlZqZ4qePOet5NxawObY7GS1bK870jDCYT35MEv/WdynLHoszhmTMLuYtYLipymr3N8WqrJHA3AgrR9gfFl0XEsyOC7UDz4O2e6XsWJqzhyCTciDYeMK17L3iA31AEcy52SG8SHmsegmt8IDItz IVDu8dbXzz K4w3k7JG8r4ZRvYjL/me9dift78nuWORTnNDnn3aG9j/NkKCVxMwIfJxQhnK4Ck9yxk aKqRh5A7DLUc4J3HqBMyXOwbWRroQc55ZmLHcjlyf/dMyLwwtTpXXq2wzEDmTy3eEY5CBX5noi445gLPWcSAvkCd/0JMySIObygKVxZENjK9pO0iRc82mj zkmGjIVKoD0CCtH2bHJVixBAeELxZtQHDxLiKnucjkK88fAZK 3MJRbNhQ45xZ4PQ2LO3hsRnyoP7Vxh27rn9hIW 67NRUspRk1uPwXlw2XiLfxYRBy7p3wuRmLqnd95icILutQ9I2Ooc4q99nY6zX7Y/p4hgdUQUIj2aUpu3nhDWBmaB6IoBWkvAun7IuLFZZ/0R878UMyYznq/6FzswVRlTq z2AHh2QvTqUc0ggHP6H2qihCjH23Qmz01iyXLZ Ygt309NDZ5wcILmrHXcy8GrKfY8 UuQ1lo 3BW4VB/luRu3RKQwMgEFKIjA52xOG7uLDLAw4EHbyhI8TAu5e04BsMXRsS/iQhWYH9/SZ59zHWnnoNwYhq9fgAO4 m2NsV KsPh bsW0RE/ymYML2h83F3a9xauz1y7x4SyMP7ZoSy9oNwzpgwhoR5E5qFQllzV3vI9qgVb2wYJrJ6AQrR/E3PT58H09B1dSU8DXj2C 1s62BObhyKeHR6o5xzpacmHX3qIKAuxuSudTYpOHoC5g8o5dXvNtX3Nc8V1zYPxhneeDAge4xLg 06GCb7Pu9hnbXisHxoRbyj/gS24T4wp/K4KZXl7RHxemblJ0amnc9yxYGkSWAUBhegqzPiZTqQg5eGEB3DXkdPNmUYIUTbmg lYmnXi q8ryaa5thaUxCLWYjJ/r8 5qj4e1DntlzGdU3qCju372s7D80VWhycV4VH3D96EkCCCFCHjWB6eXx8Rj7/iu8u9gFkGFiLx/X5lRDzvwurze5eJ4uvvI6EseU/h5c5Qlgthe7kEtkRAIbo a/PAyD3Lc1r6UC/rabL6dxbpZHqYQ2XUf8 V5gji9ErmdDj//q6IuHdEMJ37f8uF/P8xCbkRzylq8oGXgpOisv2ntNdzLyeAzTNUZNeLUG5dqpf0fNb5AnfV1rd1cnpqOndL1jpfZ72CnTJzMVHOKPiScb5NvVICmyegEF3/EMg8l/kwSc/G/XZ4sA7RQOTlQ6d  NQi81AZ9d//a1mJXgtKys1PemsVl6dQXf7cFKRkQxge2BYBk EiS3jklyd0egty04fM bmrhHprYNJr/XzhfKg2vJx5fxiKTl5G08tpKMshkv5dAhI4mYBC9GRkq7oAL1aKyDoxO/9fL4A6p9M8wFJg1jFipJ7Ca/OSMn14Ttle0wcBxhRxiXjo94Xe5zkHAAATHUlEQVSLpDDN8ImM4e2jh/O1Eo8y3x3y2O7yQOYOS7SIc/GEDg8EZ8Z18h3M3 vz6kTxGcozXy tSQIS2BwBhejmTH5Sh t4zJw6zy31KCgfiOkpHXoyh5U9oCSv/4KIeExZZX1Sgzy5WwIIJcTPVaK07twwnjnjELsFcEHDD03J1zHXeC3/bZlpqEXnsPo6rjMX7umdvsBIXioBCZxHQCF6HjevOo8AsaGv6Hg/ fN67VVDArllY3rkd03h76OWAjVjlxFe3MfWukAmp TpI3l3P7vaBvdBZWV8nQw udXx3ckGVnU8tSNTAhKQwOIEFKKLm2BTDSDtDA/NuRNqbwpyp51FcNVhIrUHHsFKOqIvOaJvw3AQLqlFKp7A9NwfUdzkp6TXkiwR Xvdd7IS3HdHK7IfhNDkIj8WMSE261juyTtgBRKQgAQuIaAQvYSe155KILeHfFRE/MqpF3u BCqxNoxpRsTti0M9Flwde5liFZFXL9BjDNf3zTrTQ543zP5Q/7sObTnULhbzfXER0mQbyFjrFNa3RsTTSiHMNrzqUIH XQISkEBrBBSirVlkve25f0nXRA JFf3P6 2qPVuIQMY0Dz2Lw6wO 0IBmM7OYyhK X/ 71gheiilUYYW1HHW6cmsf1LvLvH65JIflL8jQBGiHhKQgAS6I6AQ7c5k3TY4F1R8LCLY3tNDAhLYTyBXyT94x5acXx4R/7Fc raIeLQbBjiUJCCBXgkoRHu1XH/tviUiyHPI4bjrz362eD4C dK2L5Y6Y61pEbss/fp8TbMmCUhAAuMSUBCMy9PS9hP4wYj40Yj41Yj4JkFJQAI7CRBe8IGIYDFShhTUJ9apmv5pRHynHCUgAQn0TEAh2rP1 mo7iy2 vewrz/7yHhKQwN0JsOqdxPO7puQ5uxaiz4yInxCiBCQggZ4JKER7tl5fbf xiODB6Y5KfdnN1s5HILfovGp/ MdHBNt3cvyPiPjWkrJpvlZakwQkIIERCShER4RpUVcSyNRN5hB1oEjg7gTYcernymYP7EK17/jSiHhfRNyjnIAofaJAJSABCfRKQCHaq X6a/cdZZ/sq7w9/fXKFkvgcgKkZ7o9IkgfRVzoodRPT4iIV1fVvjsinhsRv3h5UyxBAhKQwLwEFKLz8t5ybSzA4IH78Ih465ZB2HcJVARYnIQIvVcRocfu904iexLa18cLI KlEfF CUtAAhLohYBCtBdL9d1OBChClOMbjGnr25i2flQCeDEfe8XipKsqq1Oi1ee9rLzssUCQvL0eEpCABJoloBBt1jSralgtRB1zqzKtnbmAQCatv TljFX0Px0RD9zRDryr/ysiXl8WCR7rbb2gS14qAQlI4DQCioLTeHn2eQQeEhHvKJdeX/bMPq8kr5LAOgj8QEQwlT7G4r0/GBEPi4inRgTxo/sOhCjpofDCvvmIWNR1kLYXEpBA0wQUok2bZzWNq3MfXuL9WQ0QO7JpAmOK0CHIB0TEV5d8o98SEfeNiN 3h3YtSn9z0xax8xKQwGIEFKKLod9UxbUQfWhE/Mamem9nJXAnAdI0vSYiXhQRCNKpD8JiqJOUUDcc4S1FnOItdRp/astYvgQk8BkCClEHwhwE7h0RHy0VsTDjdXNUah0SaIwAL2SIUIQe4nDugxX6tIEP9V93RQPwkCJK bDoyUMCEpDAJAQUopNgtdAdBN5S4thY0XuThCSwMQKIPxLWI0KvSlg/JxZylqYw5QXxqiOFKT8Rpodync7ZD uSgAQ6JqAQ7dh4nTX9JyPi5jItz/S8hwS2QgDBhyf0t4vwa7HftbcUcXrVND7tR5DyyQVQCGwPCUhAAicTUIiejMwLziTwzRHxhnKtC5bOhOhl3REgRhMRyq5JTIf34kk8VZimOGUqPwWq4rS74WqDJTA/AYXo/My3XOMbI JREfHLEcGKXg8JrJlALUKZju99AVBO49MvvLyHvKbYNoUp4vSdRaSu2eb2TQISOJGAQvREYJ5 EYEfigh2g Ewn hFKL24cQKItR LiD8SEd xAhG6Czde0xSl9U9 v ce  ARzul8RCritHeB3vhQtHkSaJuAQrRt 6ytdTyg2FebB9htDS3aWBtn 7MsAcY30/HsH890/BaFFt/1FKfwwIPKv/l9uFr/QxHxvuItRZiyHbDT suOYWuXwGwEFKKzobaiQiC3NcQz8uCNPqQdDOsmgKcv83eaKH63rRGmfBCm7Az1jeXfnJ3eVAR8fuCYu0FtUdiv xtj7zZNQCG6afMv0vl63/m5knov0lEr3SQBXrSIpSQmFEHqcRqB9J6mUOV 8YhBEbzE1qv2M/60l4VgpxHxbAmsnIBCdOUGbrR7ekUbNYzNuojATxUBighlP3eP8QjsikUdClQ8pUORagzqeDawJAlMQkAhOglWCz1AoPaKGivqcFkDAUTo0yPicYrQWc05FKgZizpcLIXXFJGKlxrBmgJVL qs5rIyCdydgELUUbEUgfSKUr95RZeygvWOQYA9418YEc PCDJDeCxPoJ7iT7GKSN21mj/FKQIVwcrGA8b2Lm9DW7ARAgrRjRi6wW7yoODGz4OBn4hRFyE0aCibdCUBpuHZutN4534GCjG8tVDl9 E0P72pF0tlyimemeld7afHtlQCDRNQiDZsnA00LT1JdJWYuhs72nlmA axiwcIIGjeZCqy1YyTOs1Upp9Kb rQk5qxqPkzRSveVF oVzMk7MgcBBSic1C2jqsI1FP0/I4Y9ZBA6wQQoeQKJdawp607W facvsy3VSK1PSs7sqNmtuc5k/EqSK1ZevatsUIKEQXQ2/FhQA3cQToY8u/iddimt5DAq0SQJDgCUVY8LuHBCAwFKq1V5X7HF7V3Fkq41E/XqX5Mi7VcbRJAgrRTZq9uU5zk2ZqPuO0 P1mp7ias5MNuiY2UoRuddckx8F5BHJnqVqg8jvi9CnlxSZX9vPz0xHx2uo 6Ar/87h7VeMEFKKNG2hjzUOApmcU7wDT9HoJNjYIGu4uogERyn0TQaowaNhYHTaNF/L81NujMs4YbzeUF3S6Zp7aDg1sk3cTUIg6MlojQPqbW0qjmL5CjLpDTWtW2l57MiaUqVR d0HK9sbA0j1OkUo7HH9LW8P6RyOgEB0NpQWNSIAHPW/8uVL1WRHx4yOWb1ESOIUAU/CkaCImlLGpJ/QUep4rAQlI4AoCClGHR6sEmJpCjDIdxeGK lYtte52ZYoxYvXIGaoIXbe97Z0EJDAzAYXozMCt7mQCr4qIJ5WrXMR0Mj4vOJMA06DsloT4NFn9mRC9TAISkMAhAgrRQ4T8ewsEcvca2sLiJVbUGzfagmXW2Qa88eQIvb5s2ck 8h4SkIAEJDABAYXoBFAtchICxOYxPX9dmR5lX28FwiSoN11oTsUTD0psqFkbNj0c7LwEJDA1AYXo1IQtf0wCpDBBjBo3OiZVy4IAXlCm4hGft0UEgtR4UMeGBCQggYkJKEQnBmzxoxNAMCBGM/k9HqvHmc5kdM5bKhDxiQglNRMC1LCPLVnfvkpAAosSUIguit/KLyAwzDdK3KhJni8AusFL0wvKlrK83DCm9IJucCDYZQlIYDkCCtHl2Fvz5QRYxEScaOYbRUwgSBUTl7Ndewl4Pp9ecoMyhnyJWbvF7Z8EJNAkAYVok2axUScQGE7VI0IRGcT5eUhgSIDxQnJ6Fr/x0sLLiy8ujhMJSEACCxFQiC4E3mpHJ5CrnbNg4vwQGq56Hh11lwUiQJ8SEc IiNtLflC3SezSlDZaAhJYEwGF6JqsaV8QG0yzPrZCYRJ8xwWLkZiGJy8o48O0X44JCUhAAo0QUIg2YgibMSoBpl0RG5nmialXpmDZIUcv2Kiomy6MdF shn9wWQmP11z7N20yGycBCWyNgEJ0axbfVn8VpNuyd/YWzzgeUBazkZie1fAuRtrmWLDXEpBA4wQUoo0byOaNQoCpWURJTtnjIUWY3DhK6RbSCgH2hycOFM/nvdyesxWz2A4JSEAC wkoRB0dWyLAVC3eMTylmfKJf7PC3inbvkcCLxu3RAQ2xp7YVZv2bVNbLwEJbICAQnQDRraLdyPA1O1NEfGc8hc8pKyyZ/96V9n3NWDwgCI6semby /ujNSXDW2tBCSwYQIK0Q0b365/hgCLmvCmXVd4MGWvIG17cDAFnzGgKUBNSt 2zWydBCQggZ0EFKIODAlEIGyIKySONAUpXjVW2psYv50RQoxvxvvSqtcWG7kQqR0b2RIJSEACJxFQiJ6Ey5NXTgBBihhFlKYgZdoeb5txpMsYP8UnAhT7fLwsNDMGdBl7WKsEJCCBUQkoREfFaWErIoAg5fOIqk943vjgiXNbyGmMzWIjmLOgDPHJkeIz U9Ts6VKQAISkMDsBBSisyO3ws4IIIgQpIiiXGlPF5i6RxixQMYFTucbFS8njBGfMCbmk OdFWMXH53P1yslIAEJNE1AIdq0eWxcQwQQTAglPvUWojQx85IimBBQCtP9hoNj7vuO9xMRykHiefjlx9RLDQ1 myIBCUhgKgIK0anIWu7aCeTUMT9zK9Hsc24piiBVmF4Tnl9XUmbxO8nmOXKqHfFpqMPavzH2TwISkMAOAgpRh4UELieQ08vp4avjSikd7x5iC2G6han8Os4ToQ6f90TER8oqd1jo8bx83FmCBCQgge4JKES7N6EdaJQAAgxBluI0V Fnc3MKGmHacwwkIpM 4hXOPmecZ/YNzyfCU69no4PVZklAAhJYioBCdCny1rs1AilK cnip3rhEyzq Eim81sVbentRGym8ExbZpwnwhPvr17PrY1y ysBCUjgRAIK0ROBeboERiJQe0sRdEOPaQo5fvJBmE4lUHMBET8/XfqH0OSTf6O96ekcCk8XGI00KCxGAhKQwNYIKES3ZnH72yqB2sO4awHUsN0I0/wgFtODys/PiYj7V/ XApK/cS5H/jyWB97OOtZVj ex5DxPAhKQgAT2ElCIOjgk0C6B9ELyM2Mxs7VD72SKUcTmJyshmuJz11R/LV4pN6fS f9MQVX/3i4pWyYBCUhAAl0SUIh2aTYbLQEJSEACEpCABPonoBDt34b2QAISkIAEJCABCXRJQCHapdlstAQkIAEJSEACEuifgEK0fxvaAwlIQAISkIAEJNAlAYVol2az0RKQgAQkIAEJSKB/AgrR/m1oDyQgAQlIQAISkECXBBSiXZrNRktAAhKQgAQkIIH CShE 7ehPZCABCQgAQlIQAJdElCIdmk2Gy0BCUhAAhKQgAT6J6AQ7d G9kACEpCABCQgAQl0SUAh2qXZbLQEJCABCUhAAhLon4BCtH8b2gMJSEACEpCABCTQJQGFaJdms9ESkIAEJCABCUigfwIK0f5taA8kIAEJSEACEpBAlwQUol2azUZLQAISkIAEJCCB/gkoRPu3oT2QgAQkIAEJSEACXRJQiHZpNhstAQlIQAISkIAE iegEO3fhvZAAhKQgAQkIAEJdElAIdql2Wy0BCQgAQlIQAIS6J AQrR/G9oDCUhAAhKQgAQk0CUBhWiXZrPREpCABCQgAQlIoH8CCtH bWgPJCABCUhAAhKQQJcEFKJdms1GS0ACEpCABCQggf4JKET7t6E9kIAEJCABCUhAAl0SUIh2aTYbLQEJSEACEpCABPonoBDt34b2QAISkIAEJCABCXRJQCHapdlstAQkIAEJSEACEuifgEK0fxvaAwlIQAISkIAEJNAlAYVol2az0RKQgAQkIAEJSKB/AgrR/m1oDyQgAQlIQAISkECXBBSiXZrNRktAAhKQgAQkIIH CShE 7ehPZCABCQgAQlIQAJdElCIdmk2Gy0BCUhAAhKQgAT6J6AQ7d G9kACEpCABCQgAQl0SUAh2qXZbLQEJCABCUhAAhLon4BCtH8b2gMJSEACEpCABCTQJQGFaJdms9ESkIAEJCABCUigfwIK0f5taA8kIAEJSEACEpBAlwQUol2azUZLQAISkIAEJCCB/gkoRPu3oT2QgAQkIAEJSEACXRJQiHZpNhstAQlIQAISkIAE iegEO3fhvZAAhKQgAQkIAEJdElAIdql2Wy0BCQgAQlIQAIS6J AQrR/G9oDCUhAAhKQgAQk0CUBhWiXZrPREpCABCQgAQlIoH8CCtH bWgPJCABCUhAAhKQQJcEFKJdms1GS0ACEpCABCQggf4JKET7t6E9kIAEJCABCUhAAl0SUIh2aTYbLQEJSEACEpCABPonoBDt34b2QAISkIAEJCABCXRJQCHapdlstAQkIAEJSEACEuifgEK0fxvaAwlIQAISkIAEJNAlAYVol2az0RKQgAQkIAEJSKB/AgrR/m1oDyQgAQlIQAISkECXBBSiXZrNRktAAhKQgAQkIIH CShE 7ehPZCABCQgAQlIQAJdElCIdmk2Gy0BCUhAAhKQgAT6J6AQ7d G9kACEpCABCQgAQl0SUAh2qXZbLQEJCABCUhAAhLon4BCtH8b2gMJSEACEpCABCTQJYH/B0OMMmlO7CCDAAAAAElFTkSuQmCC"

def base64_pil(base64_str):
    image = base64.b64decode(base64_str.replace(" ", "+"))
    image = BytesIO(image)
    image = Image.open(image, formats=["PNG"])
    image = image.resize((int(image.width / 4), int(image.height / 4)))
    return image


datas = [
    [(380, 210), "V"],  # 암 체크
    [(460, 210), "V"],  # 기타 체크
    [(290, 280), "건강보험증번호"],  # 건강보험증 번호
    [(660, 280), "가입자이름"],  # 가입자 이름
    [(375, 340), "김이름"],  # 수신자 이름
    [(300, 365), "010203"],  # 주민번호 앞자기
    [(430, 365), "3123456"],  # 주민번호 뒷자리
    [(655, 330), "V"],  # 문자메세지 체크
    [(280, 400), "patient1@dogcoolcodefair.com"],  # 이메일
    [(740, 400), "010-1234-5678"],  # 전화번호
    [(280, 425), "서울특별시 서초구 강남대로 273, 10층"],  # 주소
    [(270, 475), "ㅇㅇㅇㅇ과"],  # 진단과
    [(740, 475), "2022    7    30"],  # 진단일 (띄어쓰기 4번)
    [(370, 505), "엔젤만증후군"],  # 질환명
    [(700, 505), "Q39.5"],  # 질병코드
    [(320, 595), "V"],  # 암 체크
    [(615, 595), "V"],  # 기타 체크
    [(175, 630), "V"],  # 암 - 1
    [(175, 690), "V"],  # 암 - 2
    [(175, 720), "V"],  # 암 - 3
    [(175, 750), "V"],  # 암 - 4
    [(175, 780), "V"],  # 암 - 5
    [(175, 810), "V"],  # 암 - 6
    [(175, 840), "V"],  # 암 - 7
    [(550, 650), "V"],  # 기타 - 1
    [(550, 710), "V"],  # 기타 - 2
    [(550, 755), "V"],  # 기타 - 3
    [(550, 785), "V"],  # 기타 - 4
    [(550, 815), "V"],  # 기타 - 5
    [(410, 920), "2022      7      30"],  # 진단일 (띄어쓰기 6번)
    [(410, 950), "한국대학교 병원"],  # 병원명
    [(460, 980), "나의사"],  # 의사명
    [(620, 980), "134135123"],  # 면허번호
    # [(790, 980), "의사서명파일"], #의사서명파일
    [(410, 1065), "2022      7      30"],  # 신청일 (띄어쓰기 6번)
    [(650, 1095), "김이름"],  # 신청자 이름
    # [(770, 1100), "신청자서명파일"], #신청자서명파일
    [(500, 1165), "2022      7      30"],  # 신청일 (띄어쓰기 6번)
    [(380, 1190), "나의사"],  # 신청자 이름 (의사명)
    # [(480, 1190), "의사서명파일"], #의사서명파일
    [(740, 1190), "01034325234"],  # 의사 전화번호
    [(815, 1220), "담당의"],  # 수신자와의 관계
]
base_image = "./static/base.png"
sig_pos = [(790, 965), (770, 1090), (480, 1175)]


base_image = "./static/base2.png"
datas = [
    [(390/1.5,530/1.5),"어쩌구저쩌구증후군"],
    [(390/1.5,645/1.5), "이환자"],
    [(945/1.5,645/1.5), "020627 - *******"],
    [(650/1.5,1460/1.5), "2022      7      30"],
    [(330/1.5,1550/1.5), "한국대학교 병원"],
    [(315/1.5,1650/1.5), "01012345678"],
    [(450/1.5,1750/1.5), "나의사"],
    [(630/1.5,1750/1.5), "375382"],
]
memo = "가나다라마바사아자차카타파하가나다라마바사아자차카타파하가나다라마바사아자차카타파하가나다라마바사아자차카타파하가나다라마바사아자차카타파하"
for _ in range (int(len(memo)/1.5)+1):
    datas.append([(390/1.5,(870+35*_)/1.5),memo[35*_:35*(_+1)]])
sig_pos = [(int(840/1.5),int(1740/1.5))]


target_image = Image.open(base_image)
target_image = target_image.resize((int(target_image.width/1.5), int(target_image.height/1.5)))
font = "./static/NanumGothic.ttf"
selectedFont = ImageFont.truetype(font, 20)
draw = ImageDraw.Draw(target_image)
for data in datas:
    draw.text(data[0], data[1], fill="black", font=selectedFont, align="right")
[
    target_image.paste(base64_pil(base64_sig), pos, base64_pil(base64_sig))
    for pos in sig_pos
]
target_image.show()
